
FND.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000006b2  00000746  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  0080010a  0080010a  00000750  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000780  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000129e  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c9d  00000000  00000000  00001b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000965  00000000  00000000  0000283b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000284  00000000  00000000  000031a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000680  00000000  00000000  00003424  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000537  00000000  00000000  00003aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00003fdb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	aa c2       	rjmp	.+1364   	; 0x57a <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	73 c2       	rjmp	.+1254   	; 0x528 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 eb       	ldi	r30, 0xB2	; 178
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 31       	cpi	r26, 0x1F	; 31
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	82 d2       	rcall	.+1284   	; 0x5c8 <main>
  c4:	f4 c2       	rjmp	.+1512   	; 0x6ae <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <StopWatch_incMilisec>:

button_t btnMode, btnReset;

void StopWatch_incMilisec()
{
	if (stopWatchState == RUN)
  c8:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <stopWatchState>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	09 f0       	breq	.+2      	; 0xd2 <StopWatch_incMilisec+0xa>
  d0:	47 c0       	rjmp	.+142    	; 0x160 <StopWatch_incMilisec+0x98>
	{
		milisec = (milisec + 1) % 1000;
  d2:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <milisec>
  d6:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <milisec+0x1>
  da:	4f 5f       	subi	r20, 0xFF	; 255
  dc:	5f 4f       	sbci	r21, 0xFF	; 255
  de:	9a 01       	movw	r18, r20
  e0:	36 95       	lsr	r19
  e2:	27 95       	ror	r18
  e4:	36 95       	lsr	r19
  e6:	27 95       	ror	r18
  e8:	36 95       	lsr	r19
  ea:	27 95       	ror	r18
  ec:	a5 ec       	ldi	r26, 0xC5	; 197
  ee:	b0 e2       	ldi	r27, 0x20	; 32
  f0:	bb d2       	rcall	.+1398   	; 0x668 <__umulhisi3>
  f2:	92 95       	swap	r25
  f4:	82 95       	swap	r24
  f6:	8f 70       	andi	r24, 0x0F	; 15
  f8:	89 27       	eor	r24, r25
  fa:	9f 70       	andi	r25, 0x0F	; 15
  fc:	89 27       	eor	r24, r25
  fe:	68 ee       	ldi	r22, 0xE8	; 232
 100:	73 e0       	ldi	r23, 0x03	; 3
 102:	86 9f       	mul	r24, r22
 104:	90 01       	movw	r18, r0
 106:	87 9f       	mul	r24, r23
 108:	30 0d       	add	r19, r0
 10a:	96 9f       	mul	r25, r22
 10c:	30 0d       	add	r19, r0
 10e:	11 24       	eor	r1, r1
 110:	ca 01       	movw	r24, r20
 112:	82 1b       	sub	r24, r18
 114:	93 0b       	sbc	r25, r19
 116:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <milisec+0x1>
 11a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <milisec>
	}
	else return;
	
	if (milisec) return;
 11e:	89 2b       	or	r24, r25
 120:	f9 f4       	brne	.+62     	; 0x160 <StopWatch_incMilisec+0x98>
	
	sec = (sec + 1) % 60;
 122:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sec>
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	01 96       	adiw	r24, 0x01	; 1
 12a:	6c e3       	ldi	r22, 0x3C	; 60
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	89 d2       	rcall	.+1298   	; 0x642 <__divmodhi4>
 130:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sec>
	if (sec) return;
 134:	81 11       	cpse	r24, r1
 136:	14 c0       	rjmp	.+40     	; 0x160 <StopWatch_incMilisec+0x98>
	
	min = (min + 1) % 60;
 138:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <min>
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	01 96       	adiw	r24, 0x01	; 1
 140:	6c e3       	ldi	r22, 0x3C	; 60
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	7e d2       	rcall	.+1276   	; 0x642 <__divmodhi4>
 146:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <min>
	if (min) return;
 14a:	81 11       	cpse	r24, r1
 14c:	09 c0       	rjmp	.+18     	; 0x160 <StopWatch_incMilisec+0x98>
	
	hour = (hour + 1) % 24;
 14e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <hour>
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	01 96       	adiw	r24, 0x01	; 1
 156:	68 e1       	ldi	r22, 0x18	; 24
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	73 d2       	rcall	.+1254   	; 0x642 <__divmodhi4>
 15c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <hour>
 160:	08 95       	ret

00000162 <StopWatch_init>:
}

void StopWatch_init()
{
	stopWatchState = STOP;
 162:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <stopWatchState>
	milisec = 0;
 166:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <milisec+0x1>
 16a:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <milisec>
	sec = 0;
 16e:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <sec>
	min = 0;
 172:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <min>
	hour = 0;
 176:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <hour>
	
	Button_init(&btnMode, &DDRA, &PINA, 0);
 17a:	20 e0       	ldi	r18, 0x00	; 0
 17c:	49 e3       	ldi	r20, 0x39	; 57
 17e:	50 e0       	ldi	r21, 0x00	; 0
 180:	6a e3       	ldi	r22, 0x3A	; 58
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	89 e1       	ldi	r24, 0x19	; 25
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	93 d0       	rcall	.+294    	; 0x2b0 <Button_init>
	Button_init(&btnReset, &DDRA, &PINA, 1);
 18a:	21 e0       	ldi	r18, 0x01	; 1
 18c:	49 e3       	ldi	r20, 0x39	; 57
 18e:	50 e0       	ldi	r21, 0x00	; 0
 190:	6a e3       	ldi	r22, 0x3A	; 58
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	8f e0       	ldi	r24, 0x0F	; 15
 196:	91 e0       	ldi	r25, 0x01	; 1
	FND_init();
 198:	8b d0       	rcall	.+278    	; 0x2b0 <Button_init>
	TIM0_init();
 19a:	c1 d0       	rcall	.+386    	; 0x31e <FND_init>
 19c:	3d d2       	rcall	.+1146   	; 0x618 <TIM0_init>
	TIM2_init();
 19e:	45 c2       	rjmp	.+1162   	; 0x62a <TIM2_init>
 1a0:	08 95       	ret

000001a2 <StopWatch_eventCheck>:
 1a2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <stopWatchState>
	StopWatch_run();
}

void StopWatch_eventCheck()
{
	switch(stopWatchState) // event 처리
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	a9 f0       	breq	.+42     	; 0x1d4 <StopWatch_eventCheck+0x32>
 1aa:	18 f0       	brcs	.+6      	; 0x1b2 <StopWatch_eventCheck+0x10>
 1ac:	82 30       	cpi	r24, 0x02	; 2
 1ae:	d1 f0       	breq	.+52     	; 0x1e4 <StopWatch_eventCheck+0x42>
 1b0:	08 95       	ret
	{
		case STOP:
		if (Button_getState(&btnMode)==ACT_RELEASED)
 1b2:	89 e1       	ldi	r24, 0x19	; 25
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	89 d0       	rcall	.+274    	; 0x2ca <Button_getState>
 1b8:	82 30       	cpi	r24, 0x02	; 2
 1ba:	21 f4       	brne	.+8      	; 0x1c4 <StopWatch_eventCheck+0x22>
		{
			stopWatchState = RUN;
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <stopWatchState>
 1c2:	08 95       	ret
		}
		else if (Button_getState(&btnReset)==ACT_RELEASED)
 1c4:	8f e0       	ldi	r24, 0x0F	; 15
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	80 d0       	rcall	.+256    	; 0x2ca <Button_getState>
 1ca:	82 30       	cpi	r24, 0x02	; 2
 1cc:	69 f4       	brne	.+26     	; 0x1e8 <StopWatch_eventCheck+0x46>
		{
			stopWatchState = RESET;
 1ce:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <stopWatchState>
 1d2:	08 95       	ret
		}
		break;
		case RUN:
		if (Button_getState(&btnMode)==ACT_RELEASED)
 1d4:	89 e1       	ldi	r24, 0x19	; 25
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	78 d0       	rcall	.+240    	; 0x2ca <Button_getState>
 1da:	82 30       	cpi	r24, 0x02	; 2
 1dc:	29 f4       	brne	.+10     	; 0x1e8 <StopWatch_eventCheck+0x46>
		{
			stopWatchState = STOP;
 1de:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <stopWatchState>
 1e2:	08 95       	ret
		}
		break;
		case RESET:
		stopWatchState = STOP;
 1e4:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <stopWatchState>
 1e8:	08 95       	ret

000001ea <StopWatch_run>:

void StopWatch_run()
{
	uint16_t stopWatchData;
	
	if (stopWatchState == RESET)
 1ea:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <stopWatchState>
 1ee:	82 30       	cpi	r24, 0x02	; 2
 1f0:	51 f4       	brne	.+20     	; 0x206 <StopWatch_run+0x1c>
	{
		milisec = 0;
 1f2:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <milisec+0x1>
 1f6:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <milisec>
		sec = 0;
 1fa:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <sec>
		min = 0;
 1fe:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <min>
		hour = 0;
 202:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <hour>
	}
	stopWatchData = (min%10 * 1000) + (sec * 10) + (milisec / 100 % 10);
 206:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <min>
 20a:	8d ec       	ldi	r24, 0xCD	; 205
 20c:	98 9f       	mul	r25, r24
 20e:	81 2d       	mov	r24, r1
 210:	11 24       	eor	r1, r1
 212:	86 95       	lsr	r24
 214:	86 95       	lsr	r24
 216:	86 95       	lsr	r24
 218:	88 0f       	add	r24, r24
 21a:	28 2f       	mov	r18, r24
 21c:	22 0f       	add	r18, r18
 21e:	22 0f       	add	r18, r18
 220:	82 0f       	add	r24, r18
 222:	98 1b       	sub	r25, r24
 224:	28 ee       	ldi	r18, 0xE8	; 232
 226:	33 e0       	ldi	r19, 0x03	; 3
 228:	92 9f       	mul	r25, r18
 22a:	b0 01       	movw	r22, r0
 22c:	93 9f       	mul	r25, r19
 22e:	70 0d       	add	r23, r0
 230:	11 24       	eor	r1, r1
 232:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <sec>
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	a9 01       	movw	r20, r18
 23a:	44 0f       	add	r20, r20
 23c:	55 1f       	adc	r21, r21
 23e:	22 0f       	add	r18, r18
 240:	33 1f       	adc	r19, r19
 242:	22 0f       	add	r18, r18
 244:	33 1f       	adc	r19, r19
 246:	22 0f       	add	r18, r18
 248:	33 1f       	adc	r19, r19
 24a:	24 0f       	add	r18, r20
 24c:	35 1f       	adc	r19, r21
 24e:	ab 01       	movw	r20, r22
 250:	42 0f       	add	r20, r18
 252:	53 1f       	adc	r21, r19
 254:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <milisec>
 258:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <milisec+0x1>
 25c:	36 95       	lsr	r19
 25e:	27 95       	ror	r18
 260:	36 95       	lsr	r19
 262:	27 95       	ror	r18
 264:	ab e7       	ldi	r26, 0x7B	; 123
 266:	b4 e1       	ldi	r27, 0x14	; 20
 268:	ff d1       	rcall	.+1022   	; 0x668 <__umulhisi3>
 26a:	fc 01       	movw	r30, r24
 26c:	f6 95       	lsr	r31
 26e:	e7 95       	ror	r30
 270:	9f 01       	movw	r18, r30
 272:	ad ec       	ldi	r26, 0xCD	; 205
 274:	bc ec       	ldi	r27, 0xCC	; 204
 276:	f8 d1       	rcall	.+1008   	; 0x668 <__umulhisi3>
 278:	96 95       	lsr	r25
 27a:	87 95       	ror	r24
 27c:	96 95       	lsr	r25
 27e:	87 95       	ror	r24
 280:	96 95       	lsr	r25
 282:	87 95       	ror	r24
 284:	9c 01       	movw	r18, r24
 286:	22 0f       	add	r18, r18
 288:	33 1f       	adc	r19, r19
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	82 0f       	add	r24, r18
 298:	93 1f       	adc	r25, r19
 29a:	9f 01       	movw	r18, r30
 29c:	28 1b       	sub	r18, r24
 29e:	39 0b       	sbc	r19, r25
 2a0:	c9 01       	movw	r24, r18
	
	FND_setFndData(stopWatchData);
 2a2:	84 0f       	add	r24, r20
 2a4:	95 1f       	adc	r25, r21
 2a6:	35 c1       	rjmp	.+618    	; 0x512 <FND_setFndData>
 2a8:	08 95       	ret

000002aa <StopWatch_excute>:
	TIM2_init();
}

void StopWatch_excute()
{
	StopWatch_eventCheck();
 2aa:	7b df       	rcall	.-266    	; 0x1a2 <StopWatch_eventCheck>
	StopWatch_run();
 2ac:	9e cf       	rjmp	.-196    	; 0x1ea <StopWatch_run>
 2ae:	08 95       	ret

000002b0 <Button_init>:
 2b0:	fc 01       	movw	r30, r24
﻿#include "Button.h"

void Button_init(button_t *btn, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinNum)
{	
 2b2:	cb 01       	movw	r24, r22
	// 구조체에 버튼에서 사용하는 변수들 초기화
	btn->DDR = ddr;
 2b4:	71 83       	std	Z+1, r23	; 0x01
 2b6:	60 83       	st	Z, r22
	btn->PIN = pin;
 2b8:	53 83       	std	Z+3, r21	; 0x03
 2ba:	42 83       	std	Z+2, r20	; 0x02
	btn->pinNum = pinNum;
 2bc:	24 83       	std	Z+4, r18	; 0x04
	btn->prevState = RELEASED;
 2be:	31 e0       	ldi	r19, 0x01	; 1
 2c0:	35 83       	std	Z+5, r19	; 0x05
	GPIO_initPin(btn->DDR, btn->pinNum, INPUT);
 2c2:	40 e0       	ldi	r20, 0x00	; 0
 2c4:	62 2f       	mov	r22, r18
 2c6:	84 c1       	rjmp	.+776    	; 0x5d0 <GPIO_initPin>
 2c8:	08 95       	ret

000002ca <Button_getState>:
}

uint8_t Button_getState(button_t *btn)
{
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	ec 01       	movw	r28, r24
	uint8_t curState = GPIO_readPin(btn->PIN, btn->pinNum); // PULL-UP이므로 버튼이 안눌리면 1 눌리면 0
 2d0:	6c 81       	ldd	r22, Y+4	; 0x04
 2d2:	8a 81       	ldd	r24, Y+2	; 0x02
 2d4:	9b 81       	ldd	r25, Y+3	; 0x03
 2d6:	96 d1       	rcall	.+812    	; 0x604 <GPIO_readPin>
 2d8:	98 2f       	mov	r25, r24
	
	if ((curState == PUSHED) && (btn->prevState == RELEASED))
 2da:	81 11       	cpse	r24, r1
 2dc:	0b c0       	rjmp	.+22     	; 0x2f4 <Button_getState+0x2a>
 2de:	8d 81       	ldd	r24, Y+5	; 0x05
 2e0:	81 30       	cpi	r24, 0x01	; 1
 2e2:	41 f4       	brne	.+16     	; 0x2f4 <Button_getState+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e4:	ef e3       	ldi	r30, 0x3F	; 63
 2e6:	fc e9       	ldi	r31, 0x9C	; 156
 2e8:	31 97       	sbiw	r30, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <Button_getState+0x1e>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <Button_getState+0x24>
 2ee:	00 00       	nop
	{
		_delay_ms(10); // bouncing 방지
		btn->prevState = PUSHED;
 2f0:	1d 82       	std	Y+5, r1	; 0x05
		return ACT_PUSHED; // 리턴값이 1이면 눌렀을때 동작 0이면 뗐을때 동작
 2f2:	12 c0       	rjmp	.+36     	; 0x318 <Button_getState+0x4e>
	}
	else if ((curState != PUSHED) && (btn->prevState == PUSHED))
 2f4:	99 23       	and	r25, r25
 2f6:	69 f0       	breq	.+26     	; 0x312 <Button_getState+0x48>
 2f8:	8d 81       	ldd	r24, Y+5	; 0x05
 2fa:	81 11       	cpse	r24, r1
 2fc:	0c c0       	rjmp	.+24     	; 0x316 <Button_getState+0x4c>
 2fe:	8f e3       	ldi	r24, 0x3F	; 63
 300:	9c e9       	ldi	r25, 0x9C	; 156
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <Button_getState+0x38>
 306:	00 c0       	rjmp	.+0      	; 0x308 <Button_getState+0x3e>
 308:	00 00       	nop
	{
		_delay_ms(10);
		btn->prevState = RELEASED;
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	8d 83       	std	Y+5, r24	; 0x05
		return ACT_RELEASED; // 리턴값이 0이면 눌렀을때 동작 1이면 뗐을때 동작
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	03 c0       	rjmp	.+6      	; 0x318 <Button_getState+0x4e>
	}
	return ACT_NONE;
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	01 c0       	rjmp	.+2      	; 0x318 <Button_getState+0x4e>
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	08 95       	ret

0000031e <FND_init>:
uint16_t fndData = 0;

void FND_init()
{
	//FNC 출력모드
	FND_DIGIT_DDR |= ((1<<FND_DIGIT_4)|(1<<FND_DIGIT_3)|(1<<FND_DIGIT_2)|(1<<FND_DIGIT_1));
 31e:	82 b1       	in	r24, 0x02	; 2
 320:	80 6f       	ori	r24, 0xF0	; 240
 322:	82 b9       	out	0x02, r24	; 2
	FND_DATA_DDR =0xff;
 324:	8f ef       	ldi	r24, 0xFF	; 255
 326:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 32a:	08 95       	ret

0000032c <FND_dispNum>:
}

void FND_dispNum(uint16_t fndNum)
{
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	cd b7       	in	r28, 0x3d	; 61
 332:	de b7       	in	r29, 0x3e	; 62
 334:	2a 97       	sbiw	r28, 0x0a	; 10
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	f8 94       	cli
 33a:	de bf       	out	0x3e, r29	; 62
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	cd bf       	out	0x3d, r28	; 61
 340:	ac 01       	movw	r20, r24
	uint8_t fndFont[10] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x67};
 342:	8a e0       	ldi	r24, 0x0A	; 10
 344:	e0 e0       	ldi	r30, 0x00	; 0
 346:	f1 e0       	ldi	r31, 0x01	; 1
 348:	de 01       	movw	r26, r28
 34a:	11 96       	adiw	r26, 0x01	; 1
 34c:	01 90       	ld	r0, Z+
 34e:	0d 92       	st	X+, r0
 350:	8a 95       	dec	r24
 352:	e1 f7       	brne	.-8      	; 0x34c <FND_dispNum+0x20>
	// 0      1     2     3     4    5     6     7     8     9
	static uint8_t fndDigitState = 0;
	fndDigitState = (fndDigitState + 1) % 4;
 354:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	01 96       	adiw	r24, 0x01	; 1
 35c:	83 70       	andi	r24, 0x03	; 3
 35e:	90 78       	andi	r25, 0x80	; 128
 360:	99 23       	and	r25, r25
 362:	24 f4       	brge	.+8      	; 0x36c <FND_dispNum+0x40>
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	8c 6f       	ori	r24, 0xFC	; 252
 368:	9f 6f       	ori	r25, 0xFF	; 255
 36a:	01 96       	adiw	r24, 0x01	; 1
 36c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	
	FND_DIGIT_PORT |= ((1<<FND_DIGIT_4)|(1<<FND_DIGIT_3)|(1<<FND_DIGIT_2)|(1<<FND_DIGIT_1)); // FND 전부 OFF
 370:	83 b1       	in	r24, 0x03	; 3
 372:	80 6f       	ori	r24, 0xF0	; 240
 374:	83 b9       	out	0x03, r24	; 3
	
	switch(fndDigitState)
 376:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 37a:	81 30       	cpi	r24, 0x01	; 1
 37c:	09 f4       	brne	.+2      	; 0x380 <FND_dispNum+0x54>
 37e:	3e c0       	rjmp	.+124    	; 0x3fc <FND_dispNum+0xd0>
 380:	38 f0       	brcs	.+14     	; 0x390 <FND_dispNum+0x64>
 382:	82 30       	cpi	r24, 0x02	; 2
 384:	09 f4       	brne	.+2      	; 0x388 <FND_dispNum+0x5c>
 386:	6a c0       	rjmp	.+212    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 388:	83 30       	cpi	r24, 0x03	; 3
 38a:	09 f4       	brne	.+2      	; 0x38e <FND_dispNum+0x62>
 38c:	95 c0       	rjmp	.+298    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 38e:	b8 c0       	rjmp	.+368    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
	{
		case 0:
		FND_DATA_PORT = fndFont[fndNum/1000%10]; // %10을 하는 이유는 uint16값이 천의자리 이상일 수도 있기 때문
 390:	9a 01       	movw	r18, r20
 392:	36 95       	lsr	r19
 394:	27 95       	ror	r18
 396:	36 95       	lsr	r19
 398:	27 95       	ror	r18
 39a:	36 95       	lsr	r19
 39c:	27 95       	ror	r18
 39e:	a5 ec       	ldi	r26, 0xC5	; 197
 3a0:	b0 e2       	ldi	r27, 0x20	; 32
 3a2:	62 d1       	rcall	.+708    	; 0x668 <__umulhisi3>
 3a4:	ac 01       	movw	r20, r24
 3a6:	52 95       	swap	r21
 3a8:	42 95       	swap	r20
 3aa:	4f 70       	andi	r20, 0x0F	; 15
 3ac:	45 27       	eor	r20, r21
 3ae:	5f 70       	andi	r21, 0x0F	; 15
 3b0:	45 27       	eor	r20, r21
 3b2:	9a 01       	movw	r18, r20
 3b4:	ad ec       	ldi	r26, 0xCD	; 205
 3b6:	bc ec       	ldi	r27, 0xCC	; 204
 3b8:	57 d1       	rcall	.+686    	; 0x668 <__umulhisi3>
 3ba:	96 95       	lsr	r25
 3bc:	87 95       	ror	r24
 3be:	96 95       	lsr	r25
 3c0:	87 95       	ror	r24
 3c2:	96 95       	lsr	r25
 3c4:	87 95       	ror	r24
 3c6:	9c 01       	movw	r18, r24
 3c8:	22 0f       	add	r18, r18
 3ca:	33 1f       	adc	r19, r19
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	82 0f       	add	r24, r18
 3da:	93 1f       	adc	r25, r19
 3dc:	9a 01       	movw	r18, r20
 3de:	28 1b       	sub	r18, r24
 3e0:	39 0b       	sbc	r19, r25
 3e2:	e1 e0       	ldi	r30, 0x01	; 1
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	ec 0f       	add	r30, r28
 3e8:	fd 1f       	adc	r31, r29
 3ea:	e2 0f       	add	r30, r18
 3ec:	f3 1f       	adc	r31, r19
 3ee:	80 81       	ld	r24, Z
 3f0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1<<4); // 천의자리
 3f4:	83 b1       	in	r24, 0x03	; 3
 3f6:	8f 7e       	andi	r24, 0xEF	; 239
 3f8:	83 b9       	out	0x03, r24	; 3
		break;
 3fa:	82 c0       	rjmp	.+260    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
		case 1:
		FND_DATA_PORT = fndFont[fndNum/100%10];
 3fc:	9a 01       	movw	r18, r20
 3fe:	36 95       	lsr	r19
 400:	27 95       	ror	r18
 402:	36 95       	lsr	r19
 404:	27 95       	ror	r18
 406:	ab e7       	ldi	r26, 0x7B	; 123
 408:	b4 e1       	ldi	r27, 0x14	; 20
 40a:	2e d1       	rcall	.+604    	; 0x668 <__umulhisi3>
 40c:	ac 01       	movw	r20, r24
 40e:	56 95       	lsr	r21
 410:	47 95       	ror	r20
 412:	9a 01       	movw	r18, r20
 414:	ad ec       	ldi	r26, 0xCD	; 205
 416:	bc ec       	ldi	r27, 0xCC	; 204
 418:	27 d1       	rcall	.+590    	; 0x668 <__umulhisi3>
 41a:	96 95       	lsr	r25
 41c:	87 95       	ror	r24
 41e:	96 95       	lsr	r25
 420:	87 95       	ror	r24
 422:	96 95       	lsr	r25
 424:	87 95       	ror	r24
 426:	9c 01       	movw	r18, r24
 428:	22 0f       	add	r18, r18
 42a:	33 1f       	adc	r19, r19
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	82 0f       	add	r24, r18
 43a:	93 1f       	adc	r25, r19
 43c:	9a 01       	movw	r18, r20
 43e:	28 1b       	sub	r18, r24
 440:	39 0b       	sbc	r19, r25
 442:	e1 e0       	ldi	r30, 0x01	; 1
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	ec 0f       	add	r30, r28
 448:	fd 1f       	adc	r31, r29
 44a:	e2 0f       	add	r30, r18
 44c:	f3 1f       	adc	r31, r19
 44e:	80 81       	ld	r24, Z
 450:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1<<5); // 백의자리
 454:	83 b1       	in	r24, 0x03	; 3
 456:	8f 7d       	andi	r24, 0xDF	; 223
 458:	83 b9       	out	0x03, r24	; 3
		break;
		case 2:
		FND_DATA_PORT = fndFont[fndNum/10%10];
 45a:	52 c0       	rjmp	.+164    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 45c:	9a 01       	movw	r18, r20
 45e:	ad ec       	ldi	r26, 0xCD	; 205
 460:	bc ec       	ldi	r27, 0xCC	; 204
 462:	02 d1       	rcall	.+516    	; 0x668 <__umulhisi3>
 464:	ac 01       	movw	r20, r24
 466:	56 95       	lsr	r21
 468:	47 95       	ror	r20
 46a:	56 95       	lsr	r21
 46c:	47 95       	ror	r20
 46e:	56 95       	lsr	r21
 470:	47 95       	ror	r20
 472:	9a 01       	movw	r18, r20
 474:	f9 d0       	rcall	.+498    	; 0x668 <__umulhisi3>
 476:	96 95       	lsr	r25
 478:	87 95       	ror	r24
 47a:	96 95       	lsr	r25
 47c:	87 95       	ror	r24
 47e:	96 95       	lsr	r25
 480:	87 95       	ror	r24
 482:	9c 01       	movw	r18, r24
 484:	22 0f       	add	r18, r18
 486:	33 1f       	adc	r19, r19
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	88 0f       	add	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	82 0f       	add	r24, r18
 496:	93 1f       	adc	r25, r19
 498:	9a 01       	movw	r18, r20
 49a:	28 1b       	sub	r18, r24
 49c:	39 0b       	sbc	r19, r25
 49e:	e1 e0       	ldi	r30, 0x01	; 1
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	ec 0f       	add	r30, r28
 4a4:	fd 1f       	adc	r31, r29
 4a6:	e2 0f       	add	r30, r18
 4a8:	f3 1f       	adc	r31, r19
 4aa:	80 81       	ld	r24, Z
 4ac:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1<<6); // 십의자리
 4b0:	83 b1       	in	r24, 0x03	; 3
 4b2:	8f 7b       	andi	r24, 0xBF	; 191
		break;
 4b4:	83 b9       	out	0x03, r24	; 3
		case 3:
		FND_DATA_PORT = fndFont[fndNum%10];
 4b6:	24 c0       	rjmp	.+72     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 4b8:	9a 01       	movw	r18, r20
 4ba:	ad ec       	ldi	r26, 0xCD	; 205
 4bc:	bc ec       	ldi	r27, 0xCC	; 204
 4be:	d4 d0       	rcall	.+424    	; 0x668 <__umulhisi3>
 4c0:	96 95       	lsr	r25
 4c2:	87 95       	ror	r24
 4c4:	96 95       	lsr	r25
 4c6:	87 95       	ror	r24
 4c8:	96 95       	lsr	r25
 4ca:	87 95       	ror	r24
 4cc:	9c 01       	movw	r18, r24
 4ce:	22 0f       	add	r18, r18
 4d0:	33 1f       	adc	r19, r19
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	88 0f       	add	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	88 0f       	add	r24, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	82 0f       	add	r24, r18
 4e0:	93 1f       	adc	r25, r19
 4e2:	9a 01       	movw	r18, r20
 4e4:	28 1b       	sub	r18, r24
 4e6:	39 0b       	sbc	r19, r25
 4e8:	e1 e0       	ldi	r30, 0x01	; 1
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	ec 0f       	add	r30, r28
 4ee:	fd 1f       	adc	r31, r29
 4f0:	e2 0f       	add	r30, r18
 4f2:	f3 1f       	adc	r31, r19
 4f4:	80 81       	ld	r24, Z
 4f6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1<<7); // 일의자리
 4fa:	83 b1       	in	r24, 0x03	; 3
 4fc:	8f 77       	andi	r24, 0x7F	; 127
 4fe:	83 b9       	out	0x03, r24	; 3
		break;
	}
}
 500:	2a 96       	adiw	r28, 0x0a	; 10
 502:	0f b6       	in	r0, 0x3f	; 63
 504:	f8 94       	cli
 506:	de bf       	out	0x3e, r29	; 62
 508:	0f be       	out	0x3f, r0	; 63
 50a:	cd bf       	out	0x3d, r28	; 61
 50c:	df 91       	pop	r29
 50e:	cf 91       	pop	r28
 510:	08 95       	ret

00000512 <FND_setFndData>:
//seter
void FND_setFndData(uint16_t data) // main에서 100ms마다 올린 counter
{
	fndData = data; // fndData는 FND.c에서만 사용
 512:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <fndData+0x1>
 516:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <fndData>
 51a:	08 95       	ret

0000051c <FND_ISR_Process>:
}

void FND_ISR_Process()
{
	FND_dispNum(fndData);
 51c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <fndData>
 520:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <fndData+0x1>
 524:	03 cf       	rjmp	.-506    	; 0x32c <FND_dispNum>
 526:	08 95       	ret

00000528 <__vector_16>:
#include <avr/interrupt.h>
#include "AP/StopWatch/StopWatch.h"


ISR(TIMER0_OVF_vect) // overflow interrupt 조건
{
 528:	1f 92       	push	r1
 52a:	0f 92       	push	r0
 52c:	0f b6       	in	r0, 0x3f	; 63
 52e:	0f 92       	push	r0
 530:	11 24       	eor	r1, r1
 532:	0b b6       	in	r0, 0x3b	; 59
 534:	0f 92       	push	r0
 536:	2f 93       	push	r18
 538:	3f 93       	push	r19
 53a:	4f 93       	push	r20
 53c:	5f 93       	push	r21
 53e:	6f 93       	push	r22
 540:	7f 93       	push	r23
 542:	8f 93       	push	r24
 544:	9f 93       	push	r25
 546:	af 93       	push	r26
 548:	bf 93       	push	r27
 54a:	ef 93       	push	r30
 54c:	ff 93       	push	r31
	FND_ISR_Process();	
 54e:	e6 df       	rcall	.-52     	; 0x51c <FND_ISR_Process>
	TCNT0 = 130; // 1ms 주기마다 발생하도록 하는 조건 
 550:	82 e8       	ldi	r24, 0x82	; 130
 552:	82 bf       	out	0x32, r24	; 50
}
 554:	ff 91       	pop	r31
 556:	ef 91       	pop	r30
 558:	bf 91       	pop	r27
 55a:	af 91       	pop	r26
 55c:	9f 91       	pop	r25
 55e:	8f 91       	pop	r24
 560:	7f 91       	pop	r23
 562:	6f 91       	pop	r22
 564:	5f 91       	pop	r21
 566:	4f 91       	pop	r20
 568:	3f 91       	pop	r19
 56a:	2f 91       	pop	r18
 56c:	0f 90       	pop	r0
 56e:	0b be       	out	0x3b, r0	; 59
 570:	0f 90       	pop	r0
 572:	0f be       	out	0x3f, r0	; 63
 574:	0f 90       	pop	r0
 576:	1f 90       	pop	r1
 578:	18 95       	reti

0000057a <__vector_9>:

ISR(TIMER2_COMP_vect) // CTC interrupt
{
 57a:	1f 92       	push	r1
 57c:	0f 92       	push	r0
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	0f 92       	push	r0
 582:	11 24       	eor	r1, r1
 584:	0b b6       	in	r0, 0x3b	; 59
 586:	0f 92       	push	r0
 588:	2f 93       	push	r18
 58a:	3f 93       	push	r19
 58c:	4f 93       	push	r20
 58e:	5f 93       	push	r21
 590:	6f 93       	push	r22
 592:	7f 93       	push	r23
 594:	8f 93       	push	r24
 596:	9f 93       	push	r25
 598:	af 93       	push	r26
 59a:	bf 93       	push	r27
 59c:	ef 93       	push	r30
 59e:	ff 93       	push	r31
	StopWatch_incMilisec();
 5a0:	93 dd       	rcall	.-1242   	; 0xc8 <StopWatch_incMilisec>
}
 5a2:	ff 91       	pop	r31
 5a4:	ef 91       	pop	r30
 5a6:	bf 91       	pop	r27
 5a8:	af 91       	pop	r26
 5aa:	9f 91       	pop	r25
 5ac:	8f 91       	pop	r24
 5ae:	7f 91       	pop	r23
 5b0:	6f 91       	pop	r22
 5b2:	5f 91       	pop	r21
 5b4:	4f 91       	pop	r20
 5b6:	3f 91       	pop	r19
 5b8:	2f 91       	pop	r18
 5ba:	0f 90       	pop	r0
 5bc:	0b be       	out	0x3b, r0	; 59
 5be:	0f 90       	pop	r0
 5c0:	0f be       	out	0x3f, r0	; 63
 5c2:	0f 90       	pop	r0
 5c4:	1f 90       	pop	r1
 5c6:	18 95       	reti

000005c8 <main>:

int main(void)
{
	StopWatch_init();
 5c8:	cc dd       	rcall	.-1128   	; 0x162 <StopWatch_init>
	
	sei(); // set enable interrupt (global interrupt)
	
	while (1)
	{
		StopWatch_excute();
 5ca:	78 94       	sei
 5cc:	6e de       	rcall	.-804    	; 0x2aa <StopWatch_excute>
 5ce:	fe cf       	rjmp	.-4      	; 0x5cc <main+0x4>

000005d0 <GPIO_initPin>:
}

uint8_t GPIO_readPort(volatile uint8_t *PIN)
{
	return *PIN;
}
 5d0:	fc 01       	movw	r30, r24
 5d2:	41 30       	cpi	r20, 0x01	; 1
 5d4:	59 f4       	brne	.+22     	; 0x5ec <GPIO_initPin+0x1c>
 5d6:	20 81       	ld	r18, Z
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <GPIO_initPin+0x12>
 5de:	88 0f       	add	r24, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	6a 95       	dec	r22
 5e4:	e2 f7       	brpl	.-8      	; 0x5de <GPIO_initPin+0xe>
 5e6:	82 2b       	or	r24, r18
 5e8:	80 83       	st	Z, r24
 5ea:	08 95       	ret
 5ec:	90 81       	ld	r25, Z
 5ee:	21 e0       	ldi	r18, 0x01	; 1
 5f0:	30 e0       	ldi	r19, 0x00	; 0
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <GPIO_initPin+0x28>
 5f4:	22 0f       	add	r18, r18
 5f6:	33 1f       	adc	r19, r19
 5f8:	6a 95       	dec	r22
 5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <GPIO_initPin+0x24>
 5fc:	20 95       	com	r18
 5fe:	29 23       	and	r18, r25
 600:	20 83       	st	Z, r18
 602:	08 95       	ret

00000604 <GPIO_readPin>:

uint8_t GPIO_readPin(volatile uint8_t *PIN, uint8_t pinNum)
{
	return ((*PIN & (1<<pinNum)) != 0); // 예를들어 버튼이0b000x0000이면 0인지 아닌지 비교
 604:	fc 01       	movw	r30, r24
 606:	80 81       	ld	r24, Z
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	02 c0       	rjmp	.+4      	; 0x610 <GPIO_readPin+0xc>
 60c:	95 95       	asr	r25
 60e:	87 95       	ror	r24
 610:	6a 95       	dec	r22
 612:	e2 f7       	brpl	.-8      	; 0x60c <GPIO_readPin+0x8>
 614:	81 70       	andi	r24, 0x01	; 1
 616:	08 95       	ret

00000618 <TIM0_init>:
﻿#include "Timer.h"

void TIM0_init() // 1ms Overflow Interrupt, Display
{
	TCCR0 |= ((1<<CS02) | (0<<CS01) | (1<<CS00)); // 128 PreScaler xxxxxxxx -> xxxxx101
 618:	83 b7       	in	r24, 0x33	; 51
 61a:	85 60       	ori	r24, 0x05	; 5
 61c:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0); // TIMSK Timer/Counter0 Overflow Interrupt Enable
 61e:	87 b7       	in	r24, 0x37	; 55
 620:	81 60       	ori	r24, 0x01	; 1
 622:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 130; // 1ms마다 interrupt발생
 624:	82 e8       	ldi	r24, 0x82	; 130
 626:	82 bf       	out	0x32, r24	; 50
 628:	08 95       	ret

0000062a <TIM2_init>:
}

void TIM2_init() // 1ms CTC mode Interrupt, Time
{
	TCCR2 |= ((0<<CS22) | (1<<CS21) | (1<<CS20)); // 64 PreScaler
 62a:	85 b5       	in	r24, 0x25	; 37
 62c:	83 60       	ori	r24, 0x03	; 3
 62e:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= ((1<<WGM21)|(0<<WGM20)); // CTC Mode 
 630:	85 b5       	in	r24, 0x25	; 37
 632:	88 60       	ori	r24, 0x08	; 8
 634:	85 bd       	out	0x25, r24	; 37
	TIMSK |= ((1<<OCIE2)); // Timer/Counter2 Output Compare Interrupt Enable
 636:	87 b7       	in	r24, 0x37	; 55
 638:	80 68       	ori	r24, 0x80	; 128
 63a:	87 bf       	out	0x37, r24	; 55
	OCR2 = 250 - 1; // 1ms마다 interrupt발생
 63c:	89 ef       	ldi	r24, 0xF9	; 249
 63e:	83 bd       	out	0x23, r24	; 35
 640:	08 95       	ret

00000642 <__divmodhi4>:
 642:	97 fb       	bst	r25, 7
 644:	07 2e       	mov	r0, r23
 646:	16 f4       	brtc	.+4      	; 0x64c <__divmodhi4+0xa>
 648:	00 94       	com	r0
 64a:	06 d0       	rcall	.+12     	; 0x658 <__divmodhi4_neg1>
 64c:	77 fd       	sbrc	r23, 7
 64e:	08 d0       	rcall	.+16     	; 0x660 <__divmodhi4_neg2>
 650:	1a d0       	rcall	.+52     	; 0x686 <__udivmodhi4>
 652:	07 fc       	sbrc	r0, 7
 654:	05 d0       	rcall	.+10     	; 0x660 <__divmodhi4_neg2>
 656:	3e f4       	brtc	.+14     	; 0x666 <__divmodhi4_exit>

00000658 <__divmodhi4_neg1>:
 658:	90 95       	com	r25
 65a:	81 95       	neg	r24
 65c:	9f 4f       	sbci	r25, 0xFF	; 255
 65e:	08 95       	ret

00000660 <__divmodhi4_neg2>:
 660:	70 95       	com	r23
 662:	61 95       	neg	r22
 664:	7f 4f       	sbci	r23, 0xFF	; 255

00000666 <__divmodhi4_exit>:
 666:	08 95       	ret

00000668 <__umulhisi3>:
 668:	a2 9f       	mul	r26, r18
 66a:	b0 01       	movw	r22, r0
 66c:	b3 9f       	mul	r27, r19
 66e:	c0 01       	movw	r24, r0
 670:	a3 9f       	mul	r26, r19
 672:	70 0d       	add	r23, r0
 674:	81 1d       	adc	r24, r1
 676:	11 24       	eor	r1, r1
 678:	91 1d       	adc	r25, r1
 67a:	b2 9f       	mul	r27, r18
 67c:	70 0d       	add	r23, r0
 67e:	81 1d       	adc	r24, r1
 680:	11 24       	eor	r1, r1
 682:	91 1d       	adc	r25, r1
 684:	08 95       	ret

00000686 <__udivmodhi4>:
 686:	aa 1b       	sub	r26, r26
 688:	bb 1b       	sub	r27, r27
 68a:	51 e1       	ldi	r21, 0x11	; 17
 68c:	07 c0       	rjmp	.+14     	; 0x69c <__udivmodhi4_ep>

0000068e <__udivmodhi4_loop>:
 68e:	aa 1f       	adc	r26, r26
 690:	bb 1f       	adc	r27, r27
 692:	a6 17       	cp	r26, r22
 694:	b7 07       	cpc	r27, r23
 696:	10 f0       	brcs	.+4      	; 0x69c <__udivmodhi4_ep>
 698:	a6 1b       	sub	r26, r22
 69a:	b7 0b       	sbc	r27, r23

0000069c <__udivmodhi4_ep>:
 69c:	88 1f       	adc	r24, r24
 69e:	99 1f       	adc	r25, r25
 6a0:	5a 95       	dec	r21
 6a2:	a9 f7       	brne	.-22     	; 0x68e <__udivmodhi4_loop>
 6a4:	80 95       	com	r24
 6a6:	90 95       	com	r25
 6a8:	bc 01       	movw	r22, r24
 6aa:	cd 01       	movw	r24, r26
 6ac:	08 95       	ret

000006ae <_exit>:
 6ae:	f8 94       	cli

000006b0 <__stop_program>:
 6b0:	ff cf       	rjmp	.-2      	; 0x6b0 <__stop_program>
